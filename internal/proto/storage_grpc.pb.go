// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: storage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoContentStorageService_WriteFile_FullMethodName = "/tritontube.VideoContentStorageService/WriteFile"
	VideoContentStorageService_ReadFile_FullMethodName  = "/tritontube.VideoContentStorageService/ReadFile"
	VideoContentStorageService_ListFile_FullMethodName  = "/tritontube.VideoContentStorageService/ListFile"
	VideoContentStorageService_SendFile_FullMethodName  = "/tritontube.VideoContentStorageService/SendFile"
	VideoContentStorageService_Shutdown_FullMethodName  = "/tritontube.VideoContentStorageService/Shutdown"
)

// VideoContentStorageServiceClient is the client API for VideoContentStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoContentStorageServiceClient interface {
	WriteFile(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	ReadFile(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	ListFile(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	SendFile(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type videoContentStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoContentStorageServiceClient(cc grpc.ClientConnInterface) VideoContentStorageServiceClient {
	return &videoContentStorageServiceClient{cc}
}

func (c *videoContentStorageServiceClient) WriteFile(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, VideoContentStorageService_WriteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoContentStorageServiceClient) ReadFile(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, VideoContentStorageService_ReadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoContentStorageServiceClient) ListFile(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, VideoContentStorageService_ListFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoContentStorageServiceClient) SendFile(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, VideoContentStorageService_SendFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoContentStorageServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, VideoContentStorageService_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoContentStorageServiceServer is the server API for VideoContentStorageService service.
// All implementations must embed UnimplementedVideoContentStorageServiceServer
// for forward compatibility.
type VideoContentStorageServiceServer interface {
	WriteFile(context.Context, *WriteRequest) (*WriteResponse, error)
	ReadFile(context.Context, *ReadRequest) (*ReadResponse, error)
	ListFile(context.Context, *ListRequest) (*ListResponse, error)
	SendFile(context.Context, *SendRequest) (*SendResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	mustEmbedUnimplementedVideoContentStorageServiceServer()
}

// UnimplementedVideoContentStorageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoContentStorageServiceServer struct{}

func (UnimplementedVideoContentStorageServiceServer) WriteFile(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedVideoContentStorageServiceServer) ReadFile(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedVideoContentStorageServiceServer) ListFile(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFile not implemented")
}
func (UnimplementedVideoContentStorageServiceServer) SendFile(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedVideoContentStorageServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedVideoContentStorageServiceServer) mustEmbedUnimplementedVideoContentStorageServiceServer() {
}
func (UnimplementedVideoContentStorageServiceServer) testEmbeddedByValue() {}

// UnsafeVideoContentStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoContentStorageServiceServer will
// result in compilation errors.
type UnsafeVideoContentStorageServiceServer interface {
	mustEmbedUnimplementedVideoContentStorageServiceServer()
}

func RegisterVideoContentStorageServiceServer(s grpc.ServiceRegistrar, srv VideoContentStorageServiceServer) {
	// If the following call pancis, it indicates UnimplementedVideoContentStorageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoContentStorageService_ServiceDesc, srv)
}

func _VideoContentStorageService_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoContentStorageServiceServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoContentStorageService_WriteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoContentStorageServiceServer).WriteFile(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoContentStorageService_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoContentStorageServiceServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoContentStorageService_ReadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoContentStorageServiceServer).ReadFile(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoContentStorageService_ListFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoContentStorageServiceServer).ListFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoContentStorageService_ListFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoContentStorageServiceServer).ListFile(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoContentStorageService_SendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoContentStorageServiceServer).SendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoContentStorageService_SendFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoContentStorageServiceServer).SendFile(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoContentStorageService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoContentStorageServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoContentStorageService_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoContentStorageServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoContentStorageService_ServiceDesc is the grpc.ServiceDesc for VideoContentStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoContentStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tritontube.VideoContentStorageService",
	HandlerType: (*VideoContentStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteFile",
			Handler:    _VideoContentStorageService_WriteFile_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _VideoContentStorageService_ReadFile_Handler,
		},
		{
			MethodName: "ListFile",
			Handler:    _VideoContentStorageService_ListFile_Handler,
		},
		{
			MethodName: "SendFile",
			Handler:    _VideoContentStorageService_SendFile_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _VideoContentStorageService_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}
